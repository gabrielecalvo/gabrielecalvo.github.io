<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Streamlit on Gabe Calvo</title><link>https://gabrielecalvo.github.io/tags/streamlit/</link><description>Recent content in Streamlit on Gabe Calvo</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Fri, 07 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://gabrielecalvo.github.io/tags/streamlit/index.xml" rel="self" type="application/rss+xml"/><item><title>Streamlit on Azure</title><link>https://gabrielecalvo.github.io/p/streamlit-on-azure/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://gabrielecalvo.github.io/p/streamlit-on-azure/</guid><description>&lt;img src="https://gabrielecalvo.github.io/p/streamlit-on-azure/cover.png" alt="Featured image of post Streamlit on Azure" />&lt;h1 id="guide-to-streamlit-on-azure">Guide to Streamlit on Azure&lt;/h1>
&lt;p>Streamlit is a python library that allows for quick WebApp development for relatively simple applications.
It provides common widgets and simple procedural logic.&lt;/p>
&lt;p>In this guide, we will deploy a barebone app that I recommend using as your starting point if you want to
deploy to Azure App Service.
I have found the deployment to be a little tempremental so I hope this can help you.&lt;/p>
&lt;p>I&amp;rsquo;ve taken information from &lt;a class="link" href="https://towardsdatascience.com/deploying-a-streamlit-web-app-with-azure-app-service-1f09a2159743" target="_blank" rel="noopener"
>here&lt;/a>, though that alone did not work for me.
Cloning and deploying &lt;a class="link" href="https://github.com/MarcSkovMadsen/awesome-streamlit/tree/master/.streamlit" target="_blank" rel="noopener"
>this&lt;/a> worked, but I then simplified it and updated versions to get this guide.&lt;/p>
&lt;h2 id="downloading-the-barebone-app">Downloading the barebone app&lt;/h2>
&lt;p>I&amp;rsquo;ve prepared all the files you&amp;rsquo;ll need to get a start &lt;a class="link" href="http://raw.githubusercontent.com/gabrielecalvo/gabrielecalvo.github.io/main/assets/minimal_azure_streamlit.zip" target="_blank" rel="noopener"
>here&lt;/a>&lt;/p>
&lt;h2 id="creating-azure-resources">Creating Azure Resources&lt;/h2>
&lt;p>The following resources have to be created:&lt;/p>
&lt;ul>
&lt;li>resource group&lt;/li>
&lt;li>azure container registry&lt;/li>
&lt;li>app service&lt;/li>
&lt;/ul>
&lt;p>You can create basic level of them using the &lt;a class="link" href="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli" target="_blank" rel="noopener"
>azure cli&lt;/a>
as shown below. I will assume you are using bash. I usually prefer setting the variables once and using them in all future commands. The ones you will need are:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">LOCATION&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;xxx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">RESOURCE_GROUP&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;xxx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">CONTAINER_REGISTRY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;xxx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">IMAGE_NAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;xxx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">WEBAPP_NAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;xxx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">SERVICE_PLAN_NAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;xxx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To see all possible locations use &lt;code>az account list-locations&lt;/code>&lt;/p>
&lt;p>Remember that &lt;em>WEBAPP_NAME&lt;/em> will go in the url (https://&lt;em>WEBAPP_NAME&lt;/em>.azurewebsites.net) so it needs to be unique across all azurewebsites.&lt;/p>
&lt;p>The resource-creating commands are:&lt;/p>
&lt;ul>
&lt;li>resource group: &lt;code>az group create -l $LOCATION -n $RESOURCE_GROUP&lt;/code>&lt;/li>
&lt;li>azure container registry: &lt;code>az acr create --name $CONTAINER_REGISTRY --resource-group $RESOURCE_GROUP --sku basic --admin-enabled true&lt;/code>&lt;/li>
&lt;li>app service: &lt;code>az appservice plan create -g $RESOURCE_GROUP -n $SERVICE_PLAN_NAME -l $LOCATION --is-linux --sku B1&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>If you get authorisation errors, make sure you are logged in (&lt;code>az login&lt;/code> and &lt;code>az acr login -n $CONTAINER_REGISTRY&lt;/code>)&lt;/p>
&lt;p>Once those resources are set-up, we move on to building the image (remotely) and creating the web app based on it&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">az acr build --registry &lt;span class="nv">$CONTAINER_REGISTRY&lt;/span> --resource-group &lt;span class="nv">$RESOURCE_GROUP&lt;/span> --image &lt;span class="nv">$IMAGE_NAME&lt;/span> .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">az webapp create -g &lt;span class="nv">$RESOURCE_GROUP&lt;/span> -p &lt;span class="nv">$SERVICE_PLAN_NAME&lt;/span> -n &lt;span class="nv">$WEBAPP_NAME&lt;/span> -i &lt;span class="nv">$CONTAINER_REGISTRY&lt;/span>.azurecr.io/&lt;span class="nv">$IMAGE_NAME&lt;/span>:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="local-development">Local Development&lt;/h2>
&lt;p>In order to speed up development it is usually better to build and test the image by using docker locally&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># locally build the test image&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker build -t tst .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># test the image locally&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker run --rm -it -p 80:80 tst
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="pushing-the-image-to-the-container-registry">Pushing the image to the Container Registry&lt;/h2>
&lt;p>Pushing the image will trigger an update of the WebApp on the next request.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># re-tag the image and push it to the repository&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker image tag tst &lt;span class="nv">$CONTAINER_REGISTRY&lt;/span>.azurecr.io/&lt;span class="nv">$IMAGE_NAME&lt;/span>:latest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker push &lt;span class="nv">$CONTAINER_REGISTRY&lt;/span>.azurecr.io/&lt;span class="nv">$IMAGE_NAME&lt;/span>:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The update can be a bit fiddly, so I usually prefer restarting the app from the Azure Web UI to be sure and monitor the Log Stream.&lt;/p>
&lt;h2 id="futher-considerations">Futher Considerations&lt;/h2>
&lt;p>There are a couple of things to bear in mind:&lt;/p>
&lt;ul>
&lt;li>The way the webapp defaults, it will be available to the internet unless authorisation is specified.&lt;/li>
&lt;li>The Dockerfile is in its simplest form. When opening the website to the internet there are security
concerns to address, &lt;a class="link" href="https://www.youtube.com/watch?v=JE2PJbbpjsM" target="_blank" rel="noopener"
>here&lt;/a> is a nice overview.&lt;/li>
&lt;/ul></description></item></channel></rss>